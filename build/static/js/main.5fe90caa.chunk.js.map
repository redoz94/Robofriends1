{"version":3,"sources":["CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OA0BeA,EAvBE,SAAC,GAAe,EAAbC,OAElB,MAAM,IAAIC,MAAM,YCUHC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKC,UAAU,OACf,2BACAA,UAAW,mCACXC,KAAK,SACLC,YAAY,gBACZC,SAAWJ,MCEEK,EATA,SAACC,GAEf,OADAC,QAAQC,IAAIF,GAEX,yBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UACnEN,EAAMO,WCgBMC,E,YAnBd,WAAYR,GAAQ,IAAD,8BAClB,4CAAMA,KACDS,MAAQ,CACbC,UAAU,GAHQ,E,+EAODC,GACjBC,KAAKC,SAAS,CAAEH,UAAU,M,+BAI1B,OAAIE,KAAKH,MAAMC,SACP,yDAEDE,KAAKZ,MAAMO,a,GAhBOO,aC8CZC,G,kBAvCd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEpB,YAAawB,EAAMC,OAAOC,SAb1C,EAAKV,MAAQ,CACZnB,OAAQ,GACFG,YAAa,IAJP,E,iFAQO,IAAD,OACnB2B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAEvB,OAAQkC,S,+BAO/B,IAAD,EACwBZ,KAAKH,MAA7BnB,EADA,EACAA,OAAQG,EADR,EACQA,YACNgC,EAAiBnC,EAAOoC,QAAO,SAAApC,GACxC,OAAOA,EAAOqC,KAAKC,cAAcC,SAASpC,EAAYmC,kBAEnD,OAAQtC,EAAOwC,OAGnB,yBAAKnC,UAAW,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAckB,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAQmC,OAPf,2C,GAzBYX,cCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.5fe90caa.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tif(true) {\n\t\tthrow new Error('Noooooo');\n\t}\n\treturn (\n\t\t<div>\n\t\t{\n\t\t\trobots.map((user, i) => {\n\t\treturn \t(\n\t\t\t<Card \n\t\tkey={i}\n\t\t id={robots[i].id} \n\t\t name={robots[i].name} \n\t\t email={robots[i].email}\n\t\t />\n\t\t );\n\t})\n\t\t}\n\t</div>\n \n );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t<input \n\t\tclassName= 'pa3 ba b--green bg-lightest-blue'\n\t\ttype='search' \n\t\tplaceholder='Search robots'\n\t\tonChange ={searchChange} \n\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\tconsole.log(props)\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height:'800px' }}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\thasError: false\n\t}\n\t}\n\n\tcomponentDidCatch(error) {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Ooooops. That is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundry from './ErrorBoundary'\nimport { robots } from './robots';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t        searchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => {this.setState({ robots: users})});\n}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t}\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state\n\t     const filteredRobots = robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t     return !robots.length ? \n\t     <h1>Loading</h1>:\n\t     \t(\n\t\t<div className= 'tc'>\n\t\t <h1 className='f1'>RoboFriends</h1>\n\t\t <SearchBox searchChange={this.onSearchChange}/>\n\t\t <Scroll>\n\t\t <ErrorBoundry>\n\t\t <CardList robots={filteredRobots} />\n\t\t </ErrorBoundry>\n\t\t </Scroll>\n\t</div>\n\t\t);\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}